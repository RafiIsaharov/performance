logging.level.victor=DEBUG
logging.level.p6spy=DEBUG

logging.pattern.console=%d{HH:mm:ss.SSS} %highlight(%-5level) %20.20logger{0} - %msg%n
#spring.datasource.url = jdbc:h2:tcp://localhost:9092/~/test
#spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.url = jdbc:p6spy:h2:tcp://localhost:9092/~/test
# through Database proxy that delays traffic
#spring.datasource.url = jdbc:p6spy:h2:tcp://localhost:19092/~/test
spring.datasource.driver-class-name=com.p6spy.engine.spy.P6SpyDriver
spring.datasource.username=sa
spring.datasource.password=sa

# let Hibernate create schema
spring.jpa.hibernate.ddl-auto=create

# execute schema.sql ...
spring.sql.init.mode=always
# ... after hibernate creates schema
spring.jpa.defer-datasource-initialization=true




# tells Spring to release the connection at transaction end
#   (by default Spring Boot keeps the connection until the HTTP response is sent out
#   to enable Lazy Loading during serialization of JSON = BAD PRACTICE)
#spring.jpa.open-in-view=false

# ~~~~ Batch together INSERTs to the same @Entity, max N at once ~~~~
spring.jpa.properties.hibernate.jdbc.batch_size = 100
#fetch size
#spring.jpa.properties.hibernate.jdbc.fetch_size = 100000


# ~~~~ Caching ~~~~
spring.jpa.properties.hibernate.cache.use_second_level_cache=true
spring.jpa.properties.hibernate.cache.use_query_cache=true
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.jcache.internal.JCacheRegionFactory
spring.jpa.properties.hibernate.javax.cache.provider = org.ehcache.jsr107.EhcacheCachingProvider
spring.jpa.properties.hibernate.javax.cache.uri=ehcache.xml
#to collect cache metrics:
#spring.jpa.properties.hibernate.generate_statistics = true